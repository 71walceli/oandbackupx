buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
    }
}

plugins {
    id "org.sonarqube" version "2.6"
}

apply plugin: 'com.android.application'

repositories {
    jcenter()
}

dependencies {
        implementation 'org.sufficientlysecure:openpgp-api:9.0'
}

int versionMajor = 0
int versionMinor = 3
int versionPath = 1

// translate from product flavour names to abi names
Map<String, String> abiFlavorMap = [
    "arm": "armeabi-v7a",
    "arm64": "aarch64",
    "x86":"x86",
    "x86_64": "x86_64"
]

Map<String, String> flavorTargetMap = [
    "arm": "armv7-linux-androideabi",
    "arm64": "aarch64-linux-android",
    "x86": "i686-linux-android",
    "x86_64": "x86_64-linux-android"
]

Map<String, Integer> abiVersionCodes = [
    "armeabi-v7a": 1,
    "aarch64": 2,
    "x86": 3,
    "x86_64": 4
]

android {
    compileSdkVersion 'android-26'

    defaultConfig {
        // https://medium.com/@manas/manage-your-android-app-s-versioncode-versionname-with-gradle-7f9c5dcf09bf
        versionCode = versionMajor * 10000 +
            versionMinor * 100 +
            versionPath
        versionName = "${versionMajor}.${versionMinor}.${versionPath}"
    }

    flavorDimensions "abi"
    productFlavors {
        arm {}
        arm64 {}
        x86 {}
        x86_64 {}
        universal {} // flavor containing all abi versions
        // https://medium.com/@ookami.kb/adding-flavor-specific-tasks-to-gradle-b52b40a3c1b7
        all { flavor ->
            String name = flavor.name.capitalize()
            /* workaround for the issue that we have to execute the copy
             * tasks both when packaging debug and release apks but a gradle
             * task can only be run once during a build. so this defines two
             * separate sets of tasks with the same content.
             */
            ["Release", "Debug"].each { buildType ->
                task("copy${name}${buildType}Assets", type: Copy) {
                    into "src/main/assets"
                    if (flavor.name != "universal") {
                        into("${abiFlavorMap.get(flavor.name)}") {
                            from "assets/${abiFlavorMap.get(flavor.name)}"
                        }
                    } else {
                        from "assets"
                    }
                    eachFile { logger.info("copying file: ${it.file}") }
                }
                task("clean${name}${buildType}Assets", type: Delete) {
                    doFirst {
                        delete "src/main/assets"
                        targetFiles.getFiles().forEach { file ->
                            logger.info("deleting file: ${file}")
                        }
                    }
                }
            }
        }
    }

    android.productFlavors.each { flavor ->
        task("build${flavor.name.capitalize()}Binary") {
            if(flavor.name != "universal") {
                doLast {
                    exec {
                        executable "./build.sh"
                        // TODO: determine buildtype to specify if the rust binary
                        // should be built debug or release
                        args = ["release", "--target", "${flavorTargetMap.get(flavor.name)}",
                                "--abi", "${abiFlavorMap.get(flavor.name)}"]
                    }
                }
            }
        }
    }
    android.productFlavors.each { flavor ->
        if(flavor.name != "universal") {
            // ensure that packaging the universal apk happens after all
            // the binaries have been built
            tasks."buildUniversalBinary".mustRunAfter "build${flavor.name.capitalize()}Binary"
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    afterEvaluate {
        android.productFlavors.all { flavor ->
            String name = flavor.name.capitalize()

            tasks."generate${name}DebugResources".dependsOn "build${name}Binary",
                "copy${name}DebugAssets", "clean${name}DebugAssets"
            tasks."generate${name}ReleaseResources".dependsOn "build${name}Binary",
                "copy${name}ReleaseAssets", "clean${name}ReleaseAssets"
        }
    }
}

android.applicationVariants.all { variant ->
    // at the moment product flavours are only used for distinguishing abi
    // versions so this should be safe
    variant.outputs.each { output ->
        String flavor = variant.productFlavors[0].name
        String abi = abiFlavorMap.get(flavor)
        Integer abiVersionCode = abiVersionCodes.get(abi)
        // apks requiring higher api levels should have higher version codes:
        // https://developer.android.com/google/play/publishing/multiple-apks#VersionCodes
        if(abiVersionCode != null) {
            output.versionCodeOverride =
                Integer.parseInt("${abiVersionCode}${variant.versionCode}")
        }
        output.versionNameOverride = variant.versionName + "-" + flavor
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.8'
}

clean {
    String[] abiVersions = ["armeabi-v7a", "aarch64", "x86", "x86_64"]
    abiVersions.each {
        delete "assets/${it}"
        delete "src/main/assets/${it}"
    }
}
