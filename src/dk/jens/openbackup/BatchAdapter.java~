package dk.jens.openbackup;

import android.content.Context;
import android.graphics.Color;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.CheckBox;
import android.widget.Filter;
import android.widget.LinearLayout;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class BatchAdapter extends ArrayAdapter<AppInfo>
{
    Context context;
    ArrayList<AppInfo> items;
    int layout;

    private ArrayList<AppInfo> originalValues;
    public BatchAdapter(Context context, int layout, ArrayList<AppInfo> items)
    {
        super(context, layout, items);
        this.context = context;
        this.items = items;
        this.layout = layout;
    }
    @Override
    public View getView(int pos, View convertView, ViewGroup parent)
    {
        ViewHolder viewHolder;
        if(convertView == null)
        {
            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = inflater.inflate(layout, parent, false);
            viewHolder = new ViewHolder();
            viewHolder.cb = (CheckBox) convertView.findViewById(R.id.cb);
            viewHolder.tv = (TextView) convertView.findViewById(R.id.tv);
            convertView.setTag(viewHolder);
        }
        else
        {
            viewHolder = (ViewHolder) convertView.getTag();
        }
        AppInfo appInfo = getItem(pos);
        if(appInfo != null)
        {
            viewHolder.cb.setText(appInfo.getLabel());            
            viewHolder.tv.setText(appInfo.getPackageName());
        }
        return convertView;
    }
    static class ViewHolder
    {
        CheckBox cb;
        TextView tv;
    }
    // midlertidigt to forskellige
    public Comparator<AppInfo> labelComparator = new Comparator<AppInfo>()
    {
        public int compare(AppInfo m1, AppInfo m2)
        {
            return m1.getLabel().compareToIgnoreCase(m2.getLabel());
        }
    };
    public Comparator<AppInfo> packageNameComparator = new Comparator<AppInfo>()
    {
        public int compare(AppInfo m1, AppInfo m2)
        {
            return m1.getPackageName().compareToIgnoreCase(m2.getPackageName());
        }
    };
    public void filterAppType(int options)
    {
        if(originalValues == null)
        {
            originalValues = new ArrayList<AppInfo>(items);
        }
        ArrayList<AppInfo> notInstalled = new ArrayList<AppInfo>(); 
        clear();
        switch(options)
        {
            case 1:               
                for(AppInfo appInfo : originalValues)
                {
                    if(!appInfo.isSystem)
                    {
//                        add(appInfo);
                        if(appInfo.isInstalled)
                        {
                            add(appInfo);
                        }
                        else
                        {
                            notInstalled.add(appInfo);
                        }
                    }
                }
                for(AppInfo appInfo : notInstalled)
                {
                    add(appInfo);
                }
                break;
            case 2:
                for(AppInfo appInfo : originalValues)
                {
                    if(appInfo.isSystem)
                    {
                        if(appInfo.isInstalled)
                        {
                            add(appInfo);
                        }
                        else
                        {
                            notInstalled.add(appInfo);
                        }
                    }
                }
                for(AppInfo appInfo : notInstalled)
                {
                    add(appInfo);
                }
                break;
        }
        notifyDataSetChanged();
    }
    public void sortByLabel()
    {
        Collections.sort(items, labelComparator);
        notifyDataSetChanged();
    }
    public void sortByPackageName()
    {
        Collections.sort(items, packageNameComparator);
        notifyDataSetChanged();
    }
}
